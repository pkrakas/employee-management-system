generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  email               String  @unique
  password            String
  organizationIDs     String[]  @db.ObjectId
  organizations       Organization[] @relation(fields: [organizationIDs], references: [id])
  organizationRoles   OrganizationRoles[]
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())
}

model Organization {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  userIDs             String[] @db.ObjectId
  users               User[] @relation(fields: [userIDs], references: [id])
  roles               OrganizationRoles[]
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())
  departments         Department[] 
  employees           Employee[]
}

enum ORGANIZATION_ROLE{
  VISITOR
  USER
  ADMIN
}

model OrganizationRoles {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  role                ORGANIZATION_ROLE
  userId              String @db.ObjectId
  user                User  @relation(fields: [userId], references: [id])
  organizationId      String @db.ObjectId
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())
}

model Department {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String  @db.ObjectId
  designations    Designation[]
  employees       Employee[]
}

model Designation {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  departmentId    String @db.ObjectId
  department      Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  employees       Employee[]
}

enum EmployeeStatus {
  ONBOARDING
  DEVELOPING
  PAST
}

model Employee {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  firstName             String
  lastName              String
  salary                Int?
  status                EmployeeStatus  @default(ONBOARDING)
  designation           Designation? @relation(fields: [designationId], references: [id])
  designationId         String? @db.ObjectId
  department            Department @relation(fields: [departmentId], references: [id])
  departmentId          String @db.ObjectId
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId        String  @db.ObjectId
  updatedAt             DateTime @updatedAt
  createdAt             DateTime @default(now())
}